rm(list=ls())
dev.off()
#
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(1000)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
str(training)
with(training, hist(Superplasticizer))
with(training, hist(log(Superplasticizer)))
summary(training$Superplasticizer)
library(ggplot2)
library(caret)
rm(list=ls())
dev.off()
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(1000)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
library(AppliedPredictiveModeling)
install.packages("AppliedPredictiveModeling")
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(1000)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
str(training)
with(training, hist(Superplasticizer))
with(training, hist(log(Superplasticizer)))
summary(training$Superplasticizer)
View(training)
rm(list=ls())
dev.off()
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
View(training)
grepl(names(training),"IL")
names(training)
?grepl
grepl("IL",names(training))
grepl("IL",names(training))*1
training_IL <- training[,grepl("IL",names(training))*1]
prComp <- prcomp(training_IL)
training_IL
prComp <- prcomp(as.data.frame(unclass(training_IL)))
training_IL <- as.data.frame(unclass(training_IL))
prComp <- prcomp(training_IL)
str(training_IL)
View(training_IL)
rm(list=ls())
dev.off()
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
training_IL <- training[,grepl("IL",names(training))]
View(training_IL)
training_IL <- as.data.frame(unclass(training_IL))
str(training_IL)
rm(list=ls())
dev.off()
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
str(training_IL)
training_IL <- training[,grepl("IL",names(training))]
str(training_IL)
prComp <- prcomp(training_IL)
?preProcess
rm(list=ls())
dev.off()
#
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
# find cols starting with IL
training_IL <- training[,grepl("IL",names(training))]
# PCA
str(training_IL)
preProc <- preProcess(training_IL),method="pca",thresh=0.9))
preProc <- preProcess(training_IL,method="pca",thresh=0.9)
preProc$dim
preProc
rm(list=ls())
dev.off()
#
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
# find cols starting with IL
training_IL <- training[,grepl("IL",names(training))]
# PCA
str(training_IL)
preProc <- preProcess(training_IL,method="pca",thresh=0.5)
preProc$dim
preProc
rm(list=ls())
dev.off()
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
training_IL <- training[,grepl("IL",names(training))]
str(training_IL)
preProc <- preProcess(training_IL,method="pca",thresh=0.9)
preProc
preProc$numComp
pc <- predict(preProc,training_IL)
View(pc)
rm(list=ls())
dev.off()
#
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
# find cols starting with IL
training_IL <- training[,grepl("IL",names(training))]
# PCA
str(training_IL)
preProc <- preProcess(training_IL,method="pca",thresh=0.91)
preProc$numComp # number of components needed for 0.9 % of variation
rm(list=ls())
dev.off()
#
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
# find cols starting with IL
training_IL <- training[,grepl("IL",names(training))]
# PCA
str(training_IL)
preProc <- preProcess(training_IL,method="pca",thresh=0.95)
preProc$numComp # number of components needed for 0.9 % of variation
rm(list=ls())
dev.off()
#
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
# find cols starting with IL
training_IL <- training[,grepl("IL",names(training))]
# PCA
str(training_IL)
preProc <- preProcess(training_IL,method="pca",thresh=0.89)
preProc$numComp # number of components needed for 0.9 % of variation
rm(list=ls())
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
rm(list=ls())
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
training_IL <- training[,grepl("IL",names(training))]
preProc <- preProcess(training_IL,method="pca",thresh=0.9)
trainPC <- predict(preProc,training_IL)
modelFit <- train(x=trainPC, y=training$diagnosis,method="glm")
modelFit
preProc <- preProcess(training_IL,method="pca",thresh=0.8)
trainPC <- predict(preProc,training_IL)
modelFit <- train(x=trainPC, y=training$diagnosis,method="glm")
modelFit$pred
modelFit
modelFit <- train(diagnosis ~ ., data=training_IL, method="glm")
training_IL <- cbind(training_IL, training$diagnosis)
modelFit <- train(diagnosis ~ ., data=training_IL, method="glm")
training_IL
View(training_IL)
names(training_IL)[ncol(training_IL)] <- "diagnosis"
modelFit <- train(diagnosis ~ ., data=training_IL, method="glm")
modelFit
rm(list=ls())
#
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
# subsetting to IL
training_IL <- training[,grepl("IL",names(training))]
# PCA model
preProc <- preProcess(training_IL,method="pca",thresh=0.8)
trainPC <- predict(preProc,training_IL)
modelFit_pca <- train(x=trainPC, y=training$diagnosis,method="glm")
modelFit_pca
# non-pca model
training_IL <- cbind(training_IL, training$diagnosis)
names(training_IL)[ncol(training_IL)] <- "diagnosis"
modelFit_full <- train(diagnosis ~ ., data=training_IL, method="glm")
modelFit_full
rm(list=ls())
dev.off()
#
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
# find cols starting with IL
training_IL <- training[,grepl("IL",names(training))]
# PCA
str(training_IL)
preProc <- preProcess(training_IL,method="pca",thresh=0.9)
preProc$numComp # number of components needed for 0.9 % of variation
pc <- predict(preProc,training_IL)
pc
rm(list=ls())
dev.off()
#
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
# find cols starting with IL
training_IL <- training[,grepl("IL",names(training))]
# PCA
str(training_IL)
preProc <- preProcess(training_IL,method="pca",thresh=0.9)
preProc$numComp # number of components needed for 0.9 % of variation
pc <- predict(preProc,training_IL)
preProc
rm(list=ls())
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
training_IL <- training[,grepl("IL",names(training))]
View(training_IL)
training_IL <- training_IL[,-ncol(training_IL)] # last column is called TRAIL_R3
preProc <- preProcess(training_IL,method="pca",thresh=0.8)
trainPC <- predict(preProc,training_IL)
modelFit_pca <- train(x=trainPC, y=training$diagnosis,method="glm")
modelFit_pca
training_IL <- cbind(training_IL, training$diagnosis)
names(training_IL)[ncol(training_IL)] <- "diagnosis"
modelFit_full <- train(diagnosis ~ ., data=training_IL, method="glm")
modelFit_full
View(adData)
names(adData)
rm(list=ls())
#
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
# subsetting to IL
training_IL <- training[,grepl("IL",names(training))]
training_IL <- training_IL[,-ncol(training_IL)] # last column is called TRAIL_R3
# PCA model
preProc <- preProcess(training_IL,method="pca",thresh=0.8)
trainPC <- predict(preProc,training_IL)
modelFit_pca <- train(x=trainPC, y=training$diagnosis,method="glm")
modelFit_pca
# non-pca model
training_IL <- cbind(training_IL, training$diagnosis)
names(training_IL)[ncol(training_IL)] <- "diagnosis"
modelFit_full <- train(diagnosis ~ ., data=training_IL, method="glm")
modelFit_full
rm(list=ls())
dev.off()
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
training_IL <- training[,grepl("IL",names(training))]
training_IL <- training_IL[,-ncol(training_IL)] # last column is called TRAIL_R3
str(training_IL)
preProc <- preProcess(training_IL,method="pca",thresh=0.9)
preProc
preProc$numComp # number of components needed for 0.9 % of variation
pc <- predict(preProc,training_IL)
grepl("IL",names(training))|grepl("diagnosis", names(training))
training_IL <- training[,grepl("IL",names(training))|grepl("diagnosis", names(training))]
training_IL <- training_IL[,-ncol(training_IL)]
modelFit_full <- train(diagnosis ~ ., data=training_IL, method="glm")
modelFit_full
modelFit_pca
rm(list=ls())
#
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
# subsetting to IL
training_IL <- training[,grepl("IL",names(training))]
training_IL <- training_IL[,-ncol(training_IL)] # last column is called TRAIL_R3
# PCA model
preProc <- preProcess(training_IL,method="pca",thresh=0.8)
trainPC <- predict(preProc,training_IL)
modelFit_pca <- train(x=trainPC, y=training$diagnosis,method="glm")
modelFit_pca
# non-pca model
# ... try re-subset trainng_IL
training_IL <- training[,grepl("IL",names(training))|grepl("diagnosis", names(training))]
training_IL <- training_IL[,-ncol(training_IL)]
#training_IL <- cbind(training_IL, training$diagnosis)
#names(training_IL)[ncol(training_IL)] <- "diagnosis"
modelFit_full <- train(diagnosis ~ ., data=training_IL, method="glm")
modelFit_full
rm(list=ls())
dev.off()
#
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
# find cols starting with IL
training_IL <- training[,grepl("IL",names(training))]
training_IL <- training_IL[,-ncol(training_IL)] # last column is called TRAIL_R3
# PCA
str(training_IL)
preProc <- preProcess(training_IL,method="pca",thresh=0.8)
preProc
preProc$numComp # number of components needed for 0.9 % of variation
pc <- predict(preProc,training_IL)

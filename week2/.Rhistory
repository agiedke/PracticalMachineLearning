# remove all data in memory
rm(list=ls())
dev.off()
# libraries
library(caret)
library(kernlab)
library(RANN)
# library(e1071)
# library(ISLR)
# library(ggplot2)
# library(Hmisc)
# library(grid)
# library(gridExtra)
# data
data(spam)
data(Wage)
library(ISLR)
data(Wage)
library(caret)
library(kernlab)
library(ISLR)
data(Wage)
data(wage)
library(Hmisc)
data(Wage)
library(ggplot2)
data(Wage)
library(RANN)
data(Wage)
# remove all data in memory
rm(list=ls())
dev.off()
# libraries
library(caret)
library(kernlab)
# library(RANN)
# library(e1071)
library(ISLR)
library(ggplot2)
library(Hmisc)
# library(grid)
# library(gridExtra)
# data
data(Wage)
install.packages("ISLR")
library(ISLR)
data(Wage)
inTrain <- createDataPartition(y=Wage$wage,
p=0.7, list=F)
training <- Wage[inTrain]
testing <- Wage[-inTrain,]
# remove all data in memory
rm(list=ls())
dev.off()
# libraries
library(caret)
# library(kernlab)
# library(RANN)
# library(e1071)
library(ISLR)
# library(ggplot2)
# library(Hmisc)
# library(grid)
# library(gridExtra)
# data
data(Wage)
inTrain <- createDataPartition(y=Wage$wage,
p=0.7, list=F)
training <- Wage[inTrain,]
testing <- Wage[-inTrain,]
table(training$jobclass)
dummies <- dummyVars(wage~jobclass, data=training)
dummies
?dummyVars
dummies$call
dummies$form
dummies$vars
dummies$facVars
dummies$lvls
dummies$sep
dummies$terms
head(predict(dummies, newdata=training))
head(predict(dummies, newdata=testing))
nsv <- nearZeroVar(training,saveMetrics=T)
nsv
View(nsv)
library(splines)
bsBasis <- bs(training$age, df=3)
bsBasis
View(training)
?bs
age_compare <- preProcess(training[,"age"], method=c("center","scale"))
training[,"age"]
View(training)
age_compare <- preProcess(training[,c("age", "marital")], method=c("center","scale"))
age_compare <- preProcess(training[,c("age", "maritl")], method=c("center","scale"))
age_compare_obj <- preProcess(training[,c("age", "maritl")], method=c("center","scale"))
age_compare_obj <- preProcess(training[,-c("wage")], method=c("center","scale"))
age_compare_obj <- preProcess(training[,-11], method=c("center","scale"))
age_compare <- predict(preObj, training[,-11])$age
age_compare <- predict(age_compare_obj, training[,-11])$age
head(age_compare)
head(bsBasis)
mean(training$age)
training[training$age==42,"age"]
training[training$age==42,]
View(training)
bs(training$age)
head(bs(training$age))
head(bs(training$age, df=3))
lm1 <- lm(wage ~ bsBasis, data=training)
plot(training$age, training$wage, pch=19,cex=0.5)
points(training$age, predict(lm1,newdata=training),col="red",pch=19,cex=0.5)
predict(bsBasis, age=testing$age)
head(predict(bsBasis, age=testing$age))
# remove all data in memory
rm(list=ls())
dev.off()
# libraries
library(caret)
library(kernlab)
# library(RANN)
# library(e1071)
# library(ISLR)
# library(ggplot2)
# library(Hmisc)
# library(grid)
# library(gridExtra)
# library(splines)
# load data
data(spam)
# partition data
inTrain <- createDataPartition(y=spam$type,
p=0.75, list=F)
training <- spam[inTrain,]
testing <- spam[-inTrain,]
M <- abs(cor(training[,-58]))
# remove all data in memory
rm(list=ls())
dev.off()
# libraries
library(caret)
library(kernlab)
# library(RANN)
# library(e1071)
# library(ISLR)
# library(ggplot2)
# library(Hmisc)
# library(grid)
# library(gridExtra)
# library(splines)
# load data
data(spam)
# partition data
inTrain <- createDataPartition(y=spam$type,
p=0.75, list=F)
training <- spam[inTrain,]
testing <- spam[-inTrain,]
# checking for high correlating predictors
M <- abs(cor(training[,-58]))
diag(M) <- 0
which(M>0.8,arr.ind=T)
which(M>0.8,arr.ind=F)
which(M>0.8)
which(M>0.8,arr.ind=T)
?which
diag(M)
M
names(spam)[c(34,32)]
plot(spam[,34],spam[,32])
x <- 0.71*training$num415 + 0.71*training$num857
y <- 0.71*training$num415 - 0.71*training$num857
plot(x,y)
smallSpam <- spam[,c(34,32)]
prComp <- prcomp(smallSpam)
plot(prComp$x[,1],prComp$x[,2])
prComp
?prcomp
prComp$rotation
typeColor <- ((spam$type=="spam")*1 + 1)
prComp <- prcomp(log10(spam[,-58]+1))
plot(prComp$x[,1],prComp$x[,2],col=typeColor,xlab="PC1", ylab="PC2")
((spam$type=="spam")*1 + 1)
(spam$type=="spam")*1
spam$type=="spam"
prComp$x
preProc <- preProcess(log10(training[,-58]+1),method="pca",pcaComp=2)
trainPC <- predict(preProc,log10(training[,-58]+1))
modelFit <- train(training$type ~ .,method="glm",data=trainPC)
testPC <- predict(preProc,log10(testing[,-58]+1))
confusionMatrix(testing$type,predict(modelFit,testPC))
trainPC
trainPC <- predict(preProc,log10(training[,-58]+1))
trainPC
log10(training[,-58]+1)
log10(training[,-58]+1)
preProc <- preProcess(log10(training[,-58]+1),method="pca",pcaComp=2)
trainPC <- predict(preProc,log10(training[,-58]+1))
modelFit <- train(training$type~.,method="glm",data=trainPC)
trainPC
trainPC <- cbind(predict(preProc,log10(training[,-58]+1)),training$type)
modelFit <- train(training$type~.,method="glm",data=trainPC)
modelFit <- train(training$type ~ trainPC$PC1 + trainPC$PC2,method="glm",data=trainPC)
modelFit <- train(training$type ~ trainPC$PC1 + trainPC$PC2,method="glm")
modelFit <- train(trainPC$`training$type` ~.,method="glm",data=trainPC)
warnings()
training$type
trainPC
modelFit <- train(training$type ~ .,method="glm",data=trainPC)
warnings()
# remove all data in memory
rm(list=ls())
dev.off()
# libraries
library(caret)
library(kernlab)
# library(RANN)
# library(e1071)
# library(ISLR)
# library(ggplot2)
# library(Hmisc)
# library(grid)
# library(gridExtra)
# library(splines)
# load data
data(spam)
# partition data
inTrain <- createDataPartition(y=spam$type,
p=0.75, list=F)
training <- spam[inTrain,]
testing <- spam[-inTrain,]
# checking for high correlating predictors
M <- abs(cor(training[,-58]))
diag(M) <- 0
which(M>0.8,arr.ind=T) # display variables with high correlation
names(spam)[c(34,32)]
plot(spam[,34],spam[,32])
# transformation example: rotating the plot
x <- 0.71*training$num415 + 0.71*training$num857
y <- 0.71*training$num415 - 0.71*training$num857
plot(x,y)
# using pca function
smallSpam <- spam[,c(34,32)]
prComp <- prcomp(smallSpam)
plot(prComp$x[,1],prComp$x[,2])
prComp$rotation
# application to spam data example
typeColor <- ((spam$type=="spam")*1 + 1)
prComp <- prcomp(log10(spam[,-58]+1))
plot(prComp$x[,1],prComp$x[,2],col=typeColor,xlab="PC1", ylab="PC2")
# preprocessing with PCA
preProc <- preProcess(log10(training[,-58]+1),method="pca",pcaComp=2)
trainPC <- predict(preProc,log10(training[,-58]+1))
modelFit <- train(training$type ~ .,method="glm",data=trainPC)
head(trainPC)
trainPC
training$type
testPC <- predict(preProc,log10(testing[,-58]+1))
testing$type
predict(modelFit,testPC)
modelFit <- train(training$type ~ .,method="glm",data=trainPC)
predict(modelFit,testPC)
modelFit <- train(training$type ~ .,method="glm",preProcess="pca",data=training)
modelFit <- train(x=trainPC, y=training$type,method="glm")
warngins()
warnings()
testPC <- predict(preProc,log10(testing[,-58]+1))
confusionMatrix(testing$type,predict(modelFit,testPC))
preProc <- preProcess(log10(spam[,-58]+1),method="pca",pcaComp=2)
spamPC <- predict(prePoroc,log10(spam[,-58]+1))
plot(spamPC[,1],spamPC[,2],col=typeColor)
spamPC <- predict(preProc,log10(spam[,-58]+1))
plot(spamPC[,1],spamPC[,2],col=typeColor)
modelFit <- train(training$type ~ .,method="glm",preProcess="pca",data=training)
confuMatrix(testing$type,predict(modelFit,testing))
modelFit <- train(x=trainPC, y=training$type,method="glm",preProcess="pca")
confuMatrix(testing$type,predict(modelFit,testing))
confusionMatrix(testing$type,predict(modelFit,testing))
modelFit <- train(x=trainPC, y=training$type,method="glm",preProcess="pca")
training
modelFit <- train(training$type ~.,method="glm",preProcess="pca",data=training)
# remove all data in memory
rm(list=ls())
dev.off()
# Q1
library(AppliedPredictiveModeling)
data(AlzheimerDisease)
install.packages("AppliedPredictiveModeling")
# remove all data in memory
rm(list=ls())
dev.off()
# Q1
library(AppliedPredictiveModeling)
data(AlzheimerDisease)
adData = data.frame(predictors)
trainIndex = createDataPartition(diagnosis,p=0.5,list=FALSE)
training = adData[trainIndex,]
testing = adData[-trainIndex,]
adData = data.frame(diagnosis,predictors)
trainIndex = createDataPartition(diagnosis, p = 0.50,list=FALSE)
training = adData[trainIndex,]
testing = adData[-trainIndex,]
rm(list=ls())
dev.off()
library(AppliedPredictiveModeling)
data(AlzheimerDisease)
View(predictors)
head(diagnosis)
adData = data.frame(diagnosis,predictors)
View(adData)
# remove all data in memory
rm(list=ls())
dev.off()
# Q1
library(AppliedPredictiveModeling)
data(AlzheimerDisease)
#
adData = data.frame(diagnosis,predictors)
trainIndex = createDataPartition(diagnosis, p = 0.50,list=FALSE)
training = adData[trainIndex,]
testing = adData[-trainIndex,]
head(diagnosis)
library(AppliedPredictiveModeling)
data(concrete)
rm(list=ls())
library(AppliedPredictiveModeling)
rm(list=ls())
dev.off()
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(1000)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
View(training)
with(training, plot(CompressiveStrength, type='p')
)
library(ggplot2)
qplot(seq_along(training$CompressiveStrength),training$CompressiveStrength)
str(training)
qplot(seq_along(training$CompressiveStrength),training$CompressiveStrength, color=training$Cement)
qplot(seq_along(training$CompressiveStrength),training$CompressiveStrength, color=training$BlastFurnaceSlag)
qplot(seq_along(training$CompressiveStrength),training$CompressiveStrength, color=training$FlyAsh)
qplot(seq_along(training$CompressiveStrength),training$CompressiveStrength, color=training$FlyAsh)
qplot(seq_along(training$CompressiveStrength),training$CompressiveStrength, color=training$BlastFurnaceSlag)
qplot(seq_along(training$CompressiveStrength),training$CompressiveStrength, color=training$Water)
qplot(seq_along(training$CompressiveStrength),training$CompressiveStrength, color=training$Superplasticizer)
qplot(seq_along(training$CompressiveStrength),training$CompressiveStrength, color=training$CoarseAggregate)
qplot(seq_along(training$CompressiveStrength),training$CompressiveStrength, color=training$FineAggregate)
qplot(seq_along(training$CompressiveStrength),training$CompressiveStrength, color=training$Age)
qplot(seq_along(training$CompressiveStrength),training$CompressiveStrength, color=training$CompressiveStrength)
library(Hmisc)
head(training$Cement)
cut2(training$Cement,g=2)
head(training$Cement)
head(cut2(training$Cement,g=2))
head(training[,-9])
head(cut2(training[,-9],g=2))
cut2(training[,-9],g=2)
names(training)
names(training)[1:8]
nr_groups <- 2
for(name in names(training)[1:8]){
head(cut2(training[,name],g=nr_groups))
}
for(name in names(training)[1:8]){
print(head(cut2(training[,name],g=nr_groups)))
}
for(name in names(training)[1:8]){
#print(head(cut2(training[,name],g=nr_groups)))
training[,name] <- cut2(training[,name],g=nr_groups)
}
View(training)
qplot(seq_along(training$CompressiveStrength),training$CompressiveStrength)
qplot(seq_along(training$CompressiveStrength),training$CompressiveStrength, color=training$Cement)
qplot(seq_along(training$CompressiveStrength),training$CompressiveStrength, color=training$BlastFurnaceSlag)
qplot(seq_along(training$CompressiveStrength),training$CompressiveStrength, color=training$FlyAsh)
qplot(seq_along(training$CompressiveStrength),training$CompressiveStrength, color=training$Water)
qplot(seq_along(training$CompressiveStrength),training$CompressiveStrength, color=training$Superplasticizer)
qplot(seq_along(training$CompressiveStrength),training$CompressiveStrength, color=training$CoarseAggregate)
qplot(seq_along(training$CompressiveStrength),training$CompressiveStrength, color=training$FineAggregate)
qplot(seq_along(training$CompressiveStrength),training$CompressiveStrength, color=training$Age)
qplot(seq_along(training$CompressiveStrength),training$CompressiveStrength, color=training$CompressiveStrength)
qplot(seq_along(training$CompressiveStrength),training$CompressiveStrength, color=training$Cement)
qplot(seq_along(training$CompressiveStrength),training$CompressiveStrength, color=training$Age)
qplot(seq_along(training$CompressiveStrength),training$CompressiveStrength, color=training$FlyAsh)
nr_groups <- 3
for(name in names(training)[1:8]){
#print(head(cut2(training[,name],g=nr_groups)))
training[,name] <- cut2(training[,name],g=nr_groups)
}
qplot(seq_along(training$CompressiveStrength),training$CompressiveStrength, color=training$FlyAsh)
nr_groups <- 3
for(name in names(training)[1:8]){
#print(head(cut2(training[,name],g=nr_groups)))
training[,name] <- cut2(training[,name],g=nr_groups)
}
nr_groups
nr_groups <- 4
for(name in names(training)[1:8]){
#print(head(cut2(training[,name],g=nr_groups)))
training[,name] <- cut2(training[,name],g=nr_groups)
}
# remove all data in memory
rm(list=ls())
dev.off()
# Q1
library(AppliedPredictiveModeling)
data(AlzheimerDisease)
#
adData = data.frame(diagnosis,predictors)
trainIndex = createDataPartition(diagnosis, p = 0.50,list=FALSE)
training = adData[trainIndex,]
testing = adData[-trainIndex,]
head(diagnosis)
# Q2
rm(list=ls())
dev.off()
#
library(AppliedPredictiveModeling)
library(ggplot2)
library(caret)
library(Hmisc)
data(concrete)
set.seed(1000)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
#
str(training)
#base plot
with(training, plot(CompressiveStrength, type='p'))
#ggplot
qplot(seq_along(training$CompressiveStrength),training$CompressiveStrength)
qplot(seq_along(training$CompressiveStrength),training$CompressiveStrength, color=training$Cement)
qplot(seq_along(training$CompressiveStrength),training$CompressiveStrength, color=training$BlastFurnaceSlag)
qplot(seq_along(training$CompressiveStrength),training$CompressiveStrength, color=training$FlyAsh)
qplot(seq_along(training$CompressiveStrength),training$CompressiveStrength, color=training$Water)
qplot(seq_along(training$CompressiveStrength),training$CompressiveStrength, color=training$Superplasticizer)
qplot(seq_along(training$CompressiveStrength),training$CompressiveStrength, color=training$CoarseAggregate)
qplot(seq_along(training$CompressiveStrength),training$CompressiveStrength, color=training$FineAggregate)
qplot(seq_along(training$CompressiveStrength),training$CompressiveStrength, color=training$Age)
qplot(seq_along(training$CompressiveStrength),training$CompressiveStrength, color=training$CompressiveStrength)
# grouping values
nr_groups <- 4
for(name in names(training)[1:8]){
#print(head(cut2(training[,name],g=nr_groups)))
training[,name] <- cut2(training[,name],g=nr_groups)
}
qplot(seq_along(training$CompressiveStrength),training$CompressiveStrength, color=training$FlyAsh)
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(1000)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
View(training)
rm(list=ls())
dev.off()
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(1000)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
str(training)
with(training, hist(Superplasticizer))
with(training, hist(ln(Superplasticizer)))
with(training, hist(log(Superplasticizer)))
with(training, hist(Superplasticizer))
log(0)
log(0.5)
which(Superplasticizer==0)
which(training$Superplasticizer==0)
log(-1)
summary(training$Superplasticizer)
rm(list=ls())
dev.off()
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]training = adData[ inTrain,]
testing = adData[-inTrain,]
data(AlzheimerDisease)
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
rm(list=ls())
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]training = adData[ inTrain,]
testing = adData[-inTrain,]
rm(list=ls())
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
